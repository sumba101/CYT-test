/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreatePickupArgs } from "./CreatePickupArgs";
import { UpdatePickupArgs } from "./UpdatePickupArgs";
import { DeletePickupArgs } from "./DeletePickupArgs";
import { PickupFindManyArgs } from "./PickupFindManyArgs";
import { PickupFindUniqueArgs } from "./PickupFindUniqueArgs";
import { Pickup } from "./Pickup";
import { User } from "../../user/base/User";
import { PickupService } from "../pickup.service";

@graphql.Resolver(() => Pickup)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class PickupResolverBase {
  constructor(
    protected readonly service: PickupService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Pickup",
    action: "read",
    possession: "any",
  })
  async _pickupsMeta(
    @graphql.Args() args: PickupFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Pickup])
  @nestAccessControl.UseRoles({
    resource: "Pickup",
    action: "read",
    possession: "any",
  })
  async pickups(@graphql.Args() args: PickupFindManyArgs): Promise<Pickup[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Pickup, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pickup",
    action: "read",
    possession: "own",
  })
  async pickup(
    @graphql.Args() args: PickupFindUniqueArgs
  ): Promise<Pickup | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pickup)
  @nestAccessControl.UseRoles({
    resource: "Pickup",
    action: "create",
    possession: "any",
  })
  async createPickup(@graphql.Args() args: CreatePickupArgs): Promise<Pickup> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        uuid: {
          connect: args.data.uuid,
        },
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Pickup)
  @nestAccessControl.UseRoles({
    resource: "Pickup",
    action: "update",
    possession: "any",
  })
  async updatePickup(
    @graphql.Args() args: UpdatePickupArgs
  ): Promise<Pickup | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          uuid: {
            connect: args.data.uuid,
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pickup)
  @nestAccessControl.UseRoles({
    resource: "Pickup",
    action: "delete",
    possession: "any",
  })
  async deletePickup(
    @graphql.Args() args: DeletePickupArgs
  ): Promise<Pickup | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async uuid(@graphql.Parent() parent: Pickup): Promise<User | null> {
    const result = await this.service.getUuid(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
